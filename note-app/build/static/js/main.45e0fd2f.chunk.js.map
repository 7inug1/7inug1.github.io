{"version":3,"sources":["app.jsx","index.js"],"names":["app","props","state","newNoteTitle","newNoteTags","newNoteContent","notes","filteringTag","undefined","filteredNotes","unduplicatedTagsArray","currentlyClickedFilter","handleNewNoteTitleChange","bind","handleNewNoteTagChange","handleNewNoteContentChange","getNotesByTag","submitNewNote","addTags","removeTags","totalTagsArrayFlat","this","map","note","tag","flat","setState","Set","tempFilteredNotesArray","i","length","j","push","prevProps","prevState","tempTagArrayFlat","tempTagArrayFlatUnduplicated","event","target","value","preventDefault","key","console","log","tempNewNoteTagsArray","splice","reset","name","onSubmit","type","onChange","onKeyUp","placeholder","size","newNoteTag","onClick","id","filteredNote","className","title","content","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45e0fd2f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './style.css';\n\nclass app extends Component {\n  constructor(props){\n    super(props);\n    \n    this.state = {\n      newNoteTitle: \"\",\n      newNoteTags: [],\n      newNoteContent: \"\",\n\n      notes: [\n        {\"title\": \"How to make a soup\", \"tag\": [\"recipe\", \"soup\"], \"content\": \"Put the powder into the pot and boil it.\"},\n        {\"title\": \"계란밥 만드는 법\", \"tag\": [\"recipe\", \"lifehack\"], \"content\": \"계란에 밥 비비기\"},\n        {\"title\": \"How to study\", \"tag\": [\"recipe\", \"soup\", \"lifehack\"], \"content\": \"Just do it.\"},\n        {\"title\": \"How to make a katsu\", \"tag\": [\"recipe\"], \"content\": \"Fry chicken or pork.\"},\n        {\"title\": \"How to save money\", \"tag\": [\"lifehack\"], \"content\": \"Just save it.\"},\n        {\"title\": \"What is life?\", \"tag\": [\"philosophy\"], \"content\": \"Life is something that has no meaning itself. You make of your own.\"}\n      ],\n\n      filteringTag: undefined,\n      \n      filteredNotes: [],\n      \n      unduplicatedTagsArray: [],\n      currentlyClickedFilter: false\n      \n    }\n    this.handleNewNoteTitleChange = this.handleNewNoteTitleChange.bind(this);\n    this.handleNewNoteTagChange = this.handleNewNoteTagChange.bind(this);\n    this.handleNewNoteContentChange = this.handleNewNoteContentChange.bind(this);\n    this.getNotesByTag = this.getNotesByTag.bind(this);\n    this.submitNewNote = this.submitNewNote.bind(this);\n    this.addTags = this.addTags.bind(this);\n    this.removeTags = this.removeTags.bind(this);\n  }\n  \n  componentDidMount(){\n    // console.log(\"componentDidMount\")\n    const totalTagsArray = this.state.notes.map((note)=>note.tag)\n    const totalTagsArrayFlat = totalTagsArray.flat()\n    this.setState({\n      unduplicatedTagsArray: [...new Set(totalTagsArrayFlat)],\n    })\n    this.getNotesByTag(); // getting entire notes by not passing any parameter\n  }\n\n  getNotesByTag(tag){\n    // console.log(\"getNotesByTag\")\n    // 1. get entire notes\n    if(tag===undefined){\n      this.setState({\n        filteredNotes: this.state.notes // showing entire notes at the beginning\n      })\n    }\n    \n    // 2. get specific notes by 'filteringTag'\n    else{\n      const tempFilteredNotesArray = [];\n      // 전체 note 길이만큼 순회\n      for(let i=0; i<this.state.notes.length; i++){\n        // 개별 note의 tag[]를 순회\n        for(let j=0; j<this.state.notes[i].tag.length; j++){\n          let individualTag = this.state.notes[i].tag[j];\n          \n          if(individualTag === tag){\n            tempFilteredNotesArray.push(this.state.notes[i]);\n          }\n        }\n      }\n\n      this.setState({\n        filteringTag: tag,\n        filteredNotes: tempFilteredNotesArray\n      })\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    // console.log(\"componentDidUpdate\")\n    // 1. re-spread 'unduplicatedTagsArray' buttons\n    if(prevState.notes !== this.state.notes){\n      const tempTagArray = this.state.notes.map((note)=>note.tag) // 1. get all notes' tag\n      const tempTagArrayFlat = tempTagArray.flat() // 2. make #1 flat\n      const tempTagArrayFlatUnduplicated = [...new Set(tempTagArrayFlat)] // 3. get #2 unduplicated\n\n      this.setState({\n        unduplicatedTagsArray: tempTagArrayFlatUnduplicated\n      })\n      \n      // 2. re-spread the notes\n      this.getNotesByTag(this.state.filteringTag);\n    }\n  }\n\n  handleNewNoteTitleChange(event){\n    this.setState({\n      newNoteTitle: event.target.value\n    });\n  }\n\n  handleNewNoteTagChange(event){\n    this.setState({\n      newNoteTags: event.target.value\n    });\n  }\n\n  addTags(event){\n    event.preventDefault();\n\n    if(event.key===\"Shift\"&&event.target.value){\n      console.log(\"added\")\n      const tempNewNoteTagsArray = this.state.newNoteTags\n      tempNewNoteTagsArray.push(event.target.value)\n\n      this.setState({\n        newNoteTags: tempNewNoteTagsArray\n      });  \n      console.log(\"newNoteTags: \" + \"[\"+this.state.newNoteTags+\"]\")\n      event.target.value = \"\";\n    } \n  }\n\n  removeTags(event, key){\n    event.preventDefault();\n\n    let tempNewNoteTagsArray = this.state.newNoteTags\n    tempNewNoteTagsArray.splice(key, 1)\n\n    this.setState({\n      newNoteTags: tempNewNoteTagsArray\n    })\n    console.log(\"newNoteTags: \" + \"[\"+this.state.newNoteTags+\"]\")\n  }\n\n  handleNewNoteContentChange(event){\n    this.setState({\n      newNoteContent: event.target.value\n    });\n  }\n\n  submitNewNote(event){\n    event.preventDefault();\n    // console.log(this.state.newNoteTitle);\n    // console.log(this.state.newNoteTags);\n    // console.log(this.state.newNoteContent);\n    // if(this.state.newNoteTitle===\"\" || !this.state.newNoteTags===\"\" || !this.state.newNoteContent===\"\"){\n    //   alert(\"Please fill out the form for all the sections.\")\n    // }\n    // else{\n\n      this.setState({\n        notes: [...this.state.notes, { \"title\": this.state.newNoteTitle, \"tag\": this.state.newNoteTags, \"content\": this.state.newNoteContent}],\n        newNoteTitle: \"\",\n        newNoteTags: [],\n        newNoteContent: \"\"\n      });\n      event.target.reset();\n\n      console.log(this.state.notes)\n    // }\n  }\n\n  render() {\n    return (\n      <>\n      {/* 1. Adding new note form */}\n        <form name=\"newNoteForm\" onSubmit={this.submitNewNote}>\n          <fieldset>\n          <legend>New Note</legend>\n            <label>\n            Title:\n              <input type=\"text\" name=\"title\" onChange={this.handleNewNoteTitleChange}/>\n            </label><br/>\n\n            <label>\n            Tag:\n              <input type=\"text\" name=\"tag\" onKeyUp={this.addTags} placeholder=\"Press enter to add tags\" size=\"80\"/>\n            </label><br/>\n            <ul>\n              {this.state.newNoteTags.map((newNoteTag, key)=>\n                <li key={key}>\n                  <h1>key: {key}</h1>\n                  <span>{newNoteTag}</span>\n                  <button onClick={(event)=>this.removeTags(event, key)}>X</button>\n                </li>\n              )}\n            </ul>\n\n            <label>\n            Content:\n              <textarea type=\"text\" name=\"content\" onChange={this.handleNewNoteContentChange}/>\n            </label><br/>\n\n            <button >Submit</button>\n            </fieldset>\n        </form>\n      <br/>\n\n      {/* 2. Buttons - filters */}\n        <button onClick={() => this.getNotesByTag()}>All</button> \n        \n        {this.state.unduplicatedTagsArray.map((tag, key)=>\n          <div key={key} id=\"tags\">\n            <button onClick={() => this.getNotesByTag(tag)}>{tag}</button> \n          </div>\n        )}\n        <br/>\n\n        {/* 3. Note section */}\n        <h1>Filtered Notes</h1>\n        {this.state.filteredNotes.map((filteredNote, key)=>\n          <div className=\"note-individual\" key={key}>\n            <h3> \n              Title: {filteredNote.title} \n            </h3>\n\n            <h3> \n              Tag: \n              {filteredNote.tag.map((tag, key)=>\n                <li key={key}>{key+1}. {tag}</li>\n              )} \n            </h3>\n\n            <h3> \n              Content: {filteredNote.content} \n            </h3>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport default app;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}